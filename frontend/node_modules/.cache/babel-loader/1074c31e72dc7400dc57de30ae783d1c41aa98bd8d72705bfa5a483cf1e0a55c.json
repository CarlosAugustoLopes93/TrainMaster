{"ast":null,"code":"const express = require('express');\nconst router = express.Router();\nconst pool = require('../db'); // Importando o pool do db.js\n\n// Criar um novo treino\nrouter.post('/', async (req, res) => {\n  const {\n    user_id,\n    tipo,\n    descricao,\n    data\n  } = req.body;\n  if (!user_id || !tipo || !descricao || !data) {\n    return res.status(400).json({\n      error: 'Todos os campos são obrigatórios'\n    });\n  }\n  try {\n    const result = await pool.query('INSERT INTO workouts (user_id, tipo, descricao, data) VALUES ($1, $2, $3, $4) RETURNING *', [user_id, tipo, descricao, data]);\n    res.status(201).json(result.rows[0]);\n  } catch (error) {\n    console.error('Erro ao criar treino:', error);\n    res.status(500).json({\n      error: 'Erro ao criar treino'\n    });\n  }\n});\n\n// Rota para listar todos os treinos\nrouter.get('/', async (req, res) => {\n  try {\n    const workouts = await pool.query('SELECT * FROM workouts');\n    res.json(workouts.rows);\n  } catch (error) {\n    console.error('Erro ao buscar treinos:', error);\n    res.status(500).json({\n      error: 'Erro ao buscar treinos'\n    });\n  }\n});\n\n// Rota para listar treinos de um usuário específico\nrouter.get('/:user_id', async (req, res) => {\n  const {\n    user_id\n  } = req.params;\n  try {\n    const workouts = await pool.query('SELECT * FROM workouts WHERE user_id = $1', [user_id]);\n    res.json(workouts.rows);\n  } catch (error) {\n    console.error('Erro ao buscar treinos de um usuário:', error);\n    res.status(500).json({\n      error: 'Erro ao buscar treinos de um usuário'\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","pool","post","req","res","user_id","tipo","descricao","data","body","status","json","error","result","query","rows","console","get","workouts","params","module","exports"],"sources":["C:/Users/augus/OneDrive/Documentos/TrainMaster/trainmaster/frontend/src/WorkoutListPage.js"],"sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst pool = require('../db'); // Importando o pool do db.js\r\n\r\n// Criar um novo treino\r\nrouter.post('/', async (req, res) => {\r\n    const { user_id, tipo, descricao, data } = req.body;\r\n\r\n    if (!user_id || !tipo || !descricao || !data) {\r\n        return res.status(400).json({ error: 'Todos os campos são obrigatórios' });\r\n    }\r\n\r\n    try {\r\n        const result = await pool.query(\r\n            'INSERT INTO workouts (user_id, tipo, descricao, data) VALUES ($1, $2, $3, $4) RETURNING *',\r\n            [user_id, tipo, descricao, data]\r\n        );\r\n        res.status(201).json(result.rows[0]);\r\n    } catch (error) {\r\n        console.error('Erro ao criar treino:', error);\r\n        res.status(500).json({ error: 'Erro ao criar treino' });\r\n    }\r\n});\r\n\r\n// Rota para listar todos os treinos\r\nrouter.get('/', async (req, res) => {\r\n    try {\r\n        const workouts = await pool.query('SELECT * FROM workouts');\r\n        res.json(workouts.rows);\r\n    } catch (error) {\r\n        console.error('Erro ao buscar treinos:', error);\r\n        res.status(500).json({ error: 'Erro ao buscar treinos' });\r\n    }\r\n});\r\n\r\n// Rota para listar treinos de um usuário específico\r\nrouter.get('/:user_id', async (req, res) => {\r\n    const { user_id } = req.params;\r\n\r\n    try {\r\n        const workouts = await pool.query('SELECT * FROM workouts WHERE user_id = $1', [user_id]);\r\n        res.json(workouts.rows);\r\n    } catch (error) {\r\n        console.error('Erro ao buscar treinos de um usuário:', error);\r\n        res.status(500).json({ error: 'Erro ao buscar treinos de um usuário' });\r\n    }\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGF,OAAO,CAACG,MAAM,CAAC,CAAC;AAC/B,MAAMC,IAAI,GAAGH,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;;AAE/B;AACAC,MAAM,CAACG,IAAI,CAAC,GAAG,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACjC,MAAM;IAAEC,OAAO;IAAEC,IAAI;IAAEC,SAAS;IAAEC;EAAK,CAAC,GAAGL,GAAG,CAACM,IAAI;EAEnD,IAAI,CAACJ,OAAO,IAAI,CAACC,IAAI,IAAI,CAACC,SAAS,IAAI,CAACC,IAAI,EAAE;IAC1C,OAAOJ,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,KAAK,EAAE;IAAmC,CAAC,CAAC;EAC9E;EAEA,IAAI;IACA,MAAMC,MAAM,GAAG,MAAMZ,IAAI,CAACa,KAAK,CAC3B,2FAA2F,EAC3F,CAACT,OAAO,EAAEC,IAAI,EAAEC,SAAS,EAAEC,IAAI,CACnC,CAAC;IACDJ,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAACE,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC;EACxC,CAAC,CAAC,OAAOH,KAAK,EAAE;IACZI,OAAO,CAACJ,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7CR,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,KAAK,EAAE;IAAuB,CAAC,CAAC;EAC3D;AACJ,CAAC,CAAC;;AAEF;AACAb,MAAM,CAACkB,GAAG,CAAC,GAAG,EAAE,OAAOd,GAAG,EAAEC,GAAG,KAAK;EAChC,IAAI;IACA,MAAMc,QAAQ,GAAG,MAAMjB,IAAI,CAACa,KAAK,CAAC,wBAAwB,CAAC;IAC3DV,GAAG,CAACO,IAAI,CAACO,QAAQ,CAACH,IAAI,CAAC;EAC3B,CAAC,CAAC,OAAOH,KAAK,EAAE;IACZI,OAAO,CAACJ,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/CR,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,KAAK,EAAE;IAAyB,CAAC,CAAC;EAC7D;AACJ,CAAC,CAAC;;AAEF;AACAb,MAAM,CAACkB,GAAG,CAAC,WAAW,EAAE,OAAOd,GAAG,EAAEC,GAAG,KAAK;EACxC,MAAM;IAAEC;EAAQ,CAAC,GAAGF,GAAG,CAACgB,MAAM;EAE9B,IAAI;IACA,MAAMD,QAAQ,GAAG,MAAMjB,IAAI,CAACa,KAAK,CAAC,2CAA2C,EAAE,CAACT,OAAO,CAAC,CAAC;IACzFD,GAAG,CAACO,IAAI,CAACO,QAAQ,CAACH,IAAI,CAAC;EAC3B,CAAC,CAAC,OAAOH,KAAK,EAAE;IACZI,OAAO,CAACJ,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;IAC7DR,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,KAAK,EAAE;IAAuC,CAAC,CAAC;EAC3E;AACJ,CAAC,CAAC;AAEFQ,MAAM,CAACC,OAAO,GAAGtB,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}